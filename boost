#!/bin/bash 

shared_libs=pylon:trade_shared
common_libs=pylon

# 判断一个应用是不是**公共**二方库
# NOTE: 如果你有一个新的二方库，请添加到$common_libs变量里面去
# 参数:
# $1  应用名
is_common_lib() {
    result="false"
    appname=$1
    for i in `echo $common_libs | sed 's/:/ /g'`
    do 
        if [ "$appname" == "$i" ]; then
            result="true"
            break
        fi
    done

    echo $result
}

# 判断一个应用是不是二方库
# NOTE: 如果你有一个新的二方库，请添加到$shared_libs变量里面去
# 参数:
# $1  应用名
is_shared_lib() {
    result="false"
    appname=$1
    for i in `echo $shared_libs | sed 's/:/ /g'`
    do 
        if [ "$appname" == "$i" ]; then
            result="true"
            break
        fi
    done

    echo $result
}


# 初始化一个项目，目前只是简单地把当前项目的Aone CRID写到
# 当前目录的.crid文件
# 参数:
#   $1 当前项目的CRID
init_project() {
    boost_home_set=`is_boost_home_set`
    if [ "$boost_home_set" == "false" ] ; then
        echo "你没有设置BOOST_HOME环境变量"
    else
        crid=$1
        echo $crid > .crid
        echo "初始化项目信息成功。"
    fi
}

# 检查当前文件夹是不是一个项目文件夹，现在的逻辑是检查当前
# 文件夹里面有没有.crid文件
is_project_folder() {
    if [ -f .crid ] ; then
        echo "true"
    else
        echo "false"
    fi
}

# 检查BOOST_HOME环境变量是否设置了。
# 要求设置这个变量主要是因为我们要在$BOOST_HOME/antx这个
# 目录下面寻找各个应用的antx模板
is_boost_home_set() {
    if [ "${BOOST_HOME}" == "" ]; then
        echo "false"
    else
        echo "true"
    fi
}

# 获取当前项目的CRID
get_crid() {
    cat .crid
}

# 根据当前目录的名字获取当前的应用名，该命令期望的目录名字是这样的:
#     <appname>_<branch_idx>
# 比如luna_3， luna是应用名，3是branch_idx，表示在该项目中luna
# 应用已经切换过三次分支了, 由boost co 拉下的代码目录是符合这个
# 名字的，你也可以自己重命名目录名字以符合这个简单要求。
appname() {
    curpath=`pwd`
    curname=`basename $curpath | sed 's/_[^_]*$//g'`
    echo $curname
}

# 获取应用的日志文件路径
# 参数
#   $1 应用名
get_log_path() {
    case $appname in
        tradecenter)
          echo ~/output/`appname`/logs/6100/sys/sys.log
          ;;
        marketing_center)
          echo ~/output/`appname`/logs/sys/sys.log
          ;;
        myalibaba)
          echo ~/output/`appname`/logs/sys/webx.log
          ;;
        *)
          echo ~/output/`appname`/logs/sys/webx/webx.log
          ;;
    esac
}

# 以emacs程序打开当前应用的日志
llog() {
    appname=`appname`
    log_path=`get_log_path ${appname}`
    less ${log_path}
}

# 以tail程序打开当前应用的日志
tlog() {
    appname=`appname`
    log_path=`get_log_path ${appname}`
    tail -f -n 500 ${log_path}
}

# 编译当前应用，并且把相关jar/war包安装到本地的maven仓库
# NOTE 改命令会自动去上层目录寻找名为antx_<appname>.properties
# 的文件作为该项目的antx配置文件
jmvn () {
    appname=`appname`
    is_shared=`is_shared_lib ${appname}`
    echo "开始编译${appname}"
    if [ "$is_shared" == "true" ]; then
        mvn clean install
    else
        mvn clean install -DuserProp=../antx_`appname`.properties -Dmaven.test.skip=true -DskipValidation=true
    fi
}

# 运行该项目
jrun() {
    appname=`appname`
    case $appname in 
        # marketing_center
        marketing_center)
            ./deploy/target/web-deploy/bin/start-service.sh
            ;;
        # tradecenter
        tradecenter)
            ./tradecenter.deploy/target/web-deploy/bin/start-service.sh
            ;;
        *)
            ./deploy/target/web-deploy/bin/jettyctl.sh run
            ;;
    esac

}

# 编译当前应用并且运行
jmvnrun() {
    jmvn && jrun
}

# 为当前应用生成antx配置文件
# 这个antx配置文件是根据$BOOST_HOME/antx/antx_<appname>.properties
# 这个模板文件生成而成的，想要能够自动生成antx文件你必要要在
# $BOOST_HOME/antx目录下面有对应的模板文件，自动生成的antx文件会帮你
# 把模板文件里面的对应的用户名、HOME目录，PROJECT目录等等替换成你当前
# 机器的用户名、HOME目录以及该项目的PROJECT等等。可以看看
# $BOOST_HOME/antx/antx_luna.properties作为参考
#
# NOTE: 该命令通过当前目录的名字自动判断你的应用名字
#       所以你的目录名字要规范
gen_antx() {
    appname="`appname`"
    if [ -f $BOOST_HOME/antx/antx_${appname}.properties ]; then
        fullpath=`pwd`
        dir=`dirname $fullpath`
        echo "生成antx配置文件: $dir/antx_$appname.properties"
        cat ${BOOST_HOME}/antx/antx_${appname}.properties | sed "s/USER_NAME/$LOGNAME/g;s@USER_HOME@$HOME@g;s@PROJECT_HOME@`pwd`@g" > $dir/antx_$appname.properties
        cat ../antx_$appname.properties
    else
        echo "没有找到应用${appname}所对应的antx模板文件。如果您确认应用名正确，请把该应用的antx模板添加到${BOOST_HOME}/antx/目录下，然后再试一次。"
    fi
}

# 获取svn的基本路径，这个主要是因为普通应用跟二方库不在一个路径下
# 参数:
#   $1 应用名
get_svn_base_path() {
    appname=$1
    is_common=`is_common_lib $appname`
    svn_base_path="http://svn.alibaba-inc.com/repos/ali_china/olps"
    if [ "$is_common" == "true" ]; then
         svn_base_path="http://svn.alibaba-inc.com/repos/ali_china/commons"
    fi

    echo $svn_base_path
}

# 获取项目中某个应用的最新分支名称
# 参数:
#   $1 应用名称，比如luna
#   $2 项目的CRID
get_newest_branch_name() {
    appname=$1
    crid=$2
    svn_base_path=`get_svn_base_path $appname`
    branch_name=`svn ls ${svn_base_path}/${appname}/branches/ | grep _${crid}_ | tail -n 1`
    branch_name=${branch_name%%/*}
    echo $branch_name
}

# 获取项目中某个应用的最小分支路径
# 参数
#   $1 应用名称，比如luna
#   $2 项目的CRID
get_newest_branch_path() {
    appname=$1
    crid=$2
    svn_base_path=`get_svn_base_path $appname`
    branch_name=`get_newest_branch_name $appname $crid`
    echo ${svn_base_path}/${appname}/branches/${branch_name}
}

# 从分支的名字里面把当前分支的序号提取出来
# NOTE: 这个序号在checkout代码的时候会有用的
# 参数
#   $1 分支的名字
get_branch_idx() {
    branch_name=$1
    branch_idx=${branch_name##*_}
    echo $branch_idx
}

# 为项目里面的指定的应用获取最新的代码
# 参数:
#   $1 应用名
checkout_newest_code() {
    boost_home_set=`is_boost_home_set`
    is_project=`is_project_folder`
    if [ "$boost_home_set" == "false" ] ; then
        echo "你没有设置BOOST_HOME环境变量"
    elif [ "$is_project" == "false" ] ; then
        echo "当前目录(`pwd`)不是一个合法的项目目录(忘记运行boost init了?)。"
    else
        appname=$1
        crid=`get_crid`
        branch_path=`get_newest_branch_path $appname $crid`
        branch_name=`get_newest_branch_name $appname $crid`
        if (( ${#branch_name} > 0 )); then
            branch_idx=`get_branch_idx $branch_name`
            local_branch_name=${appname}_${branch_idx}
            svn co $branch_path $local_branch_name
            touch $local_branch_name/.projectile
            echo "从: " $branch_path " 下载代码到: " $local_branch_name
        else
            echo "该项目中没有这个应用(${appname})"
        fi
    fi
}

get_debug_port() {
    curpath=`pwd`
    debug_port=`jps -v | grep ${curpath} | awk '{print $18}' | cut -d, -f2 | cut -d= -f2`
    echo $debug_port
}

# 显示应用运行时的一些信息
appinfo() {
    debug_port=`get_debug_port`
    crid=`cat .crid`
    appname=`appname`
    echo "${appname}的信息如下:"
    echo -e "\t调试端口: ${debug_port}"
    echo -e "\tCRID:     ${crid}"
}

# 显示svn日志
svnlog() {
    svn up && svn log --stop-on-copy
}

# 显示该分支跟trunk的diff
trunkdiff() {
    base_rev=`boost svnlog | tail -n 4 | head -n 1 | cut -d"|" -f1`
    # trim
    base_rev=`echo $base_rev`
    base_rev=${base_rev:1}

    echo "Diffing: svn diff -r${base_rev}:HEAD"
    svn diff -r${base_rev}:HEAD
}

boost_help() {
    echo -e "\tboost help            打印这个帮助"
    echo -e "\tboost init <crid>     初始化项目目录，crid为项目的Aone crid"
    echo -e "\tboost co <appname>    把应用最新分支的代码拉到当前目录"
    echo -e "\tboost crid            显示该项目的crid"
    echo
    echo -e "\t|---------------------------------------------------"
    echo -e "\t| 以下命令为具体应用相关的命令必须在应用的目录里面运行       "
    echo -e "\t|---------------------------------------------------"
    echo -e "\tboost antx            为当前应用生成antx配置文件"
    echo -e "\tboost mvn             编译当前的应用"
    echo -e "\tboost eclipse         为应用生成eclipse工程文件"
    echo -e "\tboost run             运行当前应用"
    echo -e "\tboost mvnrun          编译并且运行当前应用"
    echo -e "\tboost appinfo         查看应用的一些信息(这个命令只有在应用运行是才行)"
    echo -e "\tboost stop            停止当前目录所代表的应用"
    echo -e "\tboost log             以tail命令查看当前应用的日志"
    echo -e "\tboost llog            以less命令查看当前应用的日志"
    echo -e "\tboost svnlog          显示svn日志"
    echo -e "\tboost trunkdiff       显示该分支跟trunk的diff"
}

boost_stop() {
    dirpath=`pwd`
    pid=`jps -v | grep $dirpath | cut -d" " -f1`
    kill -9 $pid
    echo "Killed `appname`(pid: $pid)"
}

# 主入口
boost() {
    case $1 in
        init)
            init_project $2
            ;;
        co)
            checkout_newest_code $2
            ;;
        antx)
            gen_antx
            ;;
        mvn)
            jmvn
            ;;
        eclipse)
            mvn eclipse:eclipse
            ;;
        run)
            jrun
            ;;
        mvnrun)
            jmvnrun
            ;;
        appinfo)
            appinfo
            ;;
        stop)
            boost_stop
            ;;
        log)
            tlog
            ;;
        llog)
            llog
            ;;
        crid)
            get_crid
            ;;
        svnlog)
            svnlog
            ;;
        trunkdiff)
            trunkdiff
            ;;
        help)
            boost_help
            ;;
        *)
            boost_help
            ;;
    esac
}

boost $*
